#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;
//int  t[1002][1002];
typedef int64_t s64;
typedef uint64_t u64;
typedef uint32_t u32;
typedef pair<int,int>ii;
void solve()
{
    
}
int main()
{
    int T;
    cin>>T;
    while(T--)
    {
        solve();
    }
}



this is for gcd

in buitl function :::::::::__gcd(num1,num2);
return the gcd of two number

/*int gcd(int x,int y)
{
    if(y%x==0){
        return x;
    }
    else{
        return gcd(y%x,x);
    }
 
}
*/

this is for lcm

in built function of lcm:::::::lcm(num1,num2);
/*
int lcm(int n1,int n2)
{
    int max;
    max = (n1 > n2) ? n1 : n2;

    do
    {
        if (max % n1 == 0 && max % n2 == 0)
        {
            return max;
            break;
        }
        else
            ++max;
    } while (true);

    return 0;
    
}*/
prime number 
/*
bool isprime(int n) 
{ 
    if (n <= 1) 
        return false; 
  
    for (int i = 2; i <= sqrt(n); i++) { 
        if (n % i == 0) 
            return false; 
    } 
  
    return true; 
} 
*/
subset probem
/*
#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;
typedef pair<int,int>ii;
/*recursive program
bool subset(int arr[],int n,int sum)
{
    
    if(n==0)
    return false;
    if(sum==0)
    return true;
    else
    {
        if(arr[n-1]<=sum)
        return subset(arr,n-1,sum-arr[n-1])||subset(arr,n-1,sum);

        else
        if(arr[n-1]>sum)
        return subset(arr,n-1,sum);
    }

    return true;
}
*/
/*
memoization
int  t[1002][1002];
int  subset(int arr[],int n,int sum)
{
    
    if(n==0)
    return t[n][sum]=0;
    if(sum==0)
    return t[n][sum]=1;
    if(t[n][sum]!=-1)
    return t[n][sum];
    else
    {
        if(arr[n-1]<=sum)
        {
              return t[n][sum]=subset(arr,n-1,sum-arr[n-1])||subset(arr,n-1,sum);
        }
        else
        if(arr[n-1]>sum)
        return t[n][sum]=subset(arr,n-1,sum);
    }

    return 1;
}
*/
/*
int main()
{
    int n,sum;
    cin>>n>>sum;
    int arr[n],t[n+1][sum+1];
    memset(t,0,sizeof(t));
    for(int i=0;i<n;i++)
    cin>>arr[i];
    long long t[n+1][sum+1];
    for(int i=0;i<=sum;i++)
    t[0][i]=0;
    for(int i=0;i<=n;i++)
    t[i][0]=1;
	    for(int i=1;i<n+1;i++)
	    {
	        for(long long j=1;j<sum+1;j++)
	        {
	            if(j>=arr[i-1])
	            {
	                t[i][j]=t[i-1][j-arr[i-1]]||t[i-1][j];
	                
	            }
	            else
	            {
	                t[i][j]=t[i-1][j];
	            }
	        }
	    }
    
    
    cout<<t[n][sum]<<endl;
    return 0;
}
*/
Binary Search implemetation
/*
int binary_search(int arr[],int n,int Start,int End,int s)
{

    
    while(Start<=End)
    {
        int mid=Start+(End-Start)/2;
        if(arr[mid]==s)
        return mid;
        if(arr[Start]<arr[End])
        {
            if(s<arr[mid])
            {
                End=mid-1;
            }
            else
            {
                if(s>arr[mid])
                Start=mid+1;
            }
        }
        else
        {
            if(arr[Start]>arr[End])
            {
                if(s<arr[mid])
                Start=mid+1;
                else
                {
                    if(s>arr[mid])
                    {
                        End=mid-1;
                    }
                }
            }
        }

      

        
        

    }
    return -1;

}
*/
this is fore increasing array
/*
int binary_search(int arr[],int Start,int End,int k)
{
    while(Start<=End)
    {
        int mid=Start+(End-Start)/2;
        if(arr[mid]==k)
        return mid;
        else
        {
            if(arr[mid]<k)
            Start=mid+1;
            else
            if(arr[mid]>k)
            End=mid-1;
        }
    }
    return -1;
}*/
for(input output)
int main()
{
    ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    srand(chrono::high_resolution_clock::now().time_since_epoch().count());
    freopen("input.txt","r",stdin);
     freopen("output.txt","w",stdout);
     memset(t,-1,sizeof(t));
    
    cout<<endl;
    return 0;

}

/*here is adding sum best opproach
codeforces biv2 336Bdima and to_do list
sum of index*k for an given array
sum[i%k]+=arr[i];
*/



DFS IMPLEMENTATION FULL
CONNECTED COMPONENT
VIA MAP LIST ADJAJENCY
/*
class Graph
{
 public:
   int v;
   unordered_map<T,list<T>>adj;
   Graph()
   {

   }
   Graph(int n)
   {
    this->v=n;
   }
   void add_edges(T n1,T n2,bool bidire=true)
   {
       adj[n1].push_back(n2);
       if(bidire)
       {
           adj[n2].push_back(n1);
       }
   }
   void print_graph()
   {
       for(auto row:this->adj)
       {
           cout<<row.first;
           for(int x:row.second)
           {
               cout<<"--->>>>"<<x;
           }
           cout<<endl;
       }
   }
   void dfs_helper(int src, unordered_map<int,bool>&visited,unordered_map<int,vector<int>>&ans)
   {
       visited[src]=true;
    //    cout<<src<<endl;
       for(auto x:this->adj[src])
       {
           
           if(not visited[x])
           {
               ans[src].push_back(x);
               dfs_helper(x,visited,ans);
           }
       }
   }
   int connected(unordered_map<int,vector<int>>&ans)
   {
       unordered_map<int,bool>visited;
       int result=0;
       for(int i=1;i<=v;i++)
       {
           if(not visited[i])
           {
               dfs_helper(i,visited,ans);
               result++;
           }
       }
       return result;
   }
};
*/


BREADTH FIRST SEARCH IMPLEMENTATION
/* void bfs(int src)
   {
     queue<T>q;
     q.push(src);
     map<T,bool>visited;
     visited[src]=true;
     while(!q.empty())
     {
         T node=q.front();
         q.pop();
         cout<<node<<" ";
         for(auto x:this->adj[node])
         {
             if(not visited[x])
             {
                 q.push(x);
                 visited[x]=true;
             }
         }
     }
   }
   */

   THIS LINE FOR BASIC BIT MANUPULATION
     
   FOR CHECKING NUMBER IS POWER OF 2 OR NOT
    
  /* bool isPoweroftwo(int x)
   {
       return (x&&!(x&(x-1)));
   }
   */

   COUNT THE NUMBER OF ONE IN NUMBER IN BINARY REPRESENTATION

   /*int count1(int n)
   {
       while(n)
       {
           n=n&(n-1);
           count++;
       }
       return count;
   }
   */

   CHECK IF THE ith BIT IS SET OF NOT IN GIVEN NUMBER
/*
   bool check(int n,int i)
   {
       if(n&(1<<i))
       return true;

       return false;
   }
   */
FIND RIGHTMOST set bit nNUMBER OF GIVEN NUMBER
/*int righmost(int n)
{
    return (x&(-x));
}
*/
FIND LEFTMOST set bit  NUMBER OF GIVEN NUMBER
/*int lefmost(int n)
{
    int k=(int)log2(n);
    return 1<<k;
}
*/
SETTING RIGHTMOST UNSET BIT TO SET BIT 
/*
int set(int n)
{
    return (n|n+1);
}
*/

CONVERT DECIMAL TO BINARY 
string s = bitset<64> (n).to_string(); 

CONVERT BINARY TO DECINMAL
cout << stoi(binaryNumber, 0, 2);